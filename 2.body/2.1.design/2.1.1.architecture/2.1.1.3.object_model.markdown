#### Object Model: TextOM

To modify NLCST nodes in ECMAScript, this paper proposes TextOM. TextOM implements the nodes defined by NLCST, but provides an object-oriented style[^1]. TextOM was designed to be similar to the Document Object Model (DOM)[^2], the mechanism used by browsers to expose HTML through ECMAScript to developers. Because of TextOM's likeness to the DOM, TextOM is easy to learn and familiar to the target audience.

TextOM provides events (a mechanism for detecting changes), modification functionality (inserting, removing, and replacing children into/from parents), and traversal (e.g., finding all words in a sentence).

NLCST allows authors to extend the specification by defining their own nodes, for example creating phrase or clause nodes. TextOM allows for the same extension, and is build to work well with “unknown” node types.

[^1]: Object-oriented programming is a style of programming, where classes, instances, attributes, and methods are important.

[^2]:
    The DOM specification defines a platform-neutral model for errors, events, and (for this paper, the primary feature) node trees. XML-based documents can be represented by the DOM. Consider the following HTML document: 

    ```html
    <!DOCTYPE html>
    <html class=e>
        <head><title>Aliens?</title></head>
        <body>Why yes.</body>
    </html>
    ```

    Is represented by the DOM as follows:

    ```html
    |- Document
       |- Doctype: html
       |- Element: html class="e"
          |- Element: head
          |  |- Element: title
          |     |- Text: Aliens?
          |- Text: ⏎␣
          |- Element: body
            |- Text: Why yes.⏎
    ```

    The DOM interfaces of bygone times were widely considered horrible, but newer features seem to be gaining popularity in the web authoring community as broader implementation across user agents is reached.
